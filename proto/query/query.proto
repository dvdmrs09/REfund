syntax = "proto3";
package defundlabs.defund.query;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "query/interquery.proto";
// this line is used by starport scaffolding # 1
import "gogoproto/gogo.proto";

option go_package = "github.com/defund-labs/defund/x/query/types";

// Query defines the gRPC querier service.
service Query {
    // Queries a interquery by index.
	rpc Interquery(QueryGetInterqueryRequest) returns (QueryGetInterqueryResponse) {
		option (google.api.http).get = "/defund-labs/defund/query/interquery/{storeid}";
	}

	// Queries a list of interquery items.
	rpc InterqueryAll(QueryAllInterqueryRequest) returns (QueryAllInterqueryResponse) {
		option (google.api.http).get = "/defund-labs/defund/query/interquery";
	}
	
    // Queries a interquery result by index.
	rpc InterqueryResult(QueryGetInterqueryResultRequest) returns (QueryGetInterqueryResultResponse) {
		option (google.api.http).get = "/defund-labs/defund/query/interqueryresult/{storeid}";
	}

	// Queries a list of interquery result items.
	rpc InterqueryResultAll(QueryAllInterqueryResultRequest) returns (QueryAllInterqueryResultResponse) {
		option (google.api.http).get = "/defund-labs/defund/query/interqueryresult";
	}

    // Queries a interquery timeout result by index.
	rpc InterqueryTimeoutResult(QueryGetInterqueryTimeoutResultRequest) returns (QueryGetInterqueryTimeoutResultResponse) {
		option (google.api.http).get = "/defund-labs/defund/query/interquerytimeoutresult/{storeid}";
	}

	// Queries a list of interquery timeout result items.
	rpc InterqueryTimeoutResultAll(QueryAllInterqueryTimeoutResultRequest) returns (QueryAllInterqueryTimeoutResultResponse) {
		option (google.api.http).get = "/defund-labs/defund/query/interquerytimeoutresult";
	}

// this line is used by starport scaffolding # 2
}

//Interquery request/response

message QueryGetInterqueryRequest {
	  string storeid = 1;

}

message QueryGetInterqueryResponse {
	Interquery interquery = 1 [(gogoproto.nullable) = false];
}

message QueryAllInterqueryRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInterqueryResponse {
	repeated Interquery interquery = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Interquery result requests/response

message QueryGetInterqueryResultRequest {
	string storeid = 1;

}

message QueryGetInterqueryResultResponse {
	InterqueryResult interqueryresult = 1 [(gogoproto.nullable) = false];
}

message QueryAllInterqueryResultRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInterqueryResultResponse {
  repeated InterqueryResult interqueryresult = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Interquery timeout result requests/response

message QueryGetInterqueryTimeoutResultRequest {
	string storeid = 1;

}

message QueryGetInterqueryTimeoutResultResponse {
	InterqueryTimeoutResult interquerytimeoutresult = 1 [(gogoproto.nullable) = false];
}

message QueryAllInterqueryTimeoutResultRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInterqueryTimeoutResultResponse {
  repeated InterqueryTimeoutResult interquerytimeoutresult = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
